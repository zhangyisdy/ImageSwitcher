package cn.wxhyi.coverflow;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import android.app.ActionBar.LayoutParams;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.ScaleAnimation;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.Gallery;
import android.widget.ImageSwitcher;
import android.widget.ImageView;
import android.widget.Toast;
import android.widget.ViewSwitcher.ViewFactory;
import android.content.res.Configuration;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.content.pm.ActivityInfo;

import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;

public class ScanPicActivity extends Activity implements
		OnItemSelectedListener, OnTouchListener {

	private static final String TAG = "DoubleScreenCamera";
	public static final String ACTION_MODE_SWITCH = "action.lenovo.MODE_SWITCH";

	DisplayImageOptions options;
	String[] imageUrls;
	protected ImageLoader imageLoader = ImageLoader.getInstance();
	private ImageSwitcher mImageswitcher;

	private float downX;
	private float lastX;
	private int currentPosition = 0;
	private int switcherIndex = 0;

	static final List<Bitmap> imageswicher = Collections.synchronizedList(new LinkedList<Bitmap>());
	private Map<String, Bitmap> bigImage = new HashMap<String, Bitmap>();
	
	private Cursor cursor;
	private ArrayList<String> list;
	int mCurrentMode ;

	private MwReceiver  mReceiver = new  MwReceiver();

	/**
	 * Scan the picture in sdcard
	 * 
	 * @return ArrayList<String> list
	 */
	private ArrayList<String> getImgPathList() {
		list = new ArrayList<String>();
		cursor = getContentResolver().query(
				MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
				new String[] { "_id", "_data" }, null, null, null);
		while (cursor.moveToNext()) {
			list.add(0, cursor.getString(1));
			Log.i("cursorItemUrl", cursor.getString(1) + "");
		}
		cursor.close();
		return list;
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig){
		Log.d("DoubleScreenCamera", "ScanPicActivity onConfigurationChanged");
		super.onConfigurationChanged(newConfig);
	}

	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if(keyCode == KeyEvent.KEYCODE_BACK){

//			int mCurrentMode = mModeManager.getCurrentMode();
////			mModeManager.setFullPhone(true);
//			if(mCurrentMode == ModeManager.MODE_PHONE){
//				Log.i("DoubleScreenCamera", "return to MainActivity");
//				Intent inten = new Intent(this, MainActivity.class);
//				startActivity(inten);
//			}
//			if(mCurrentMode == ModeManager.MODE_PAD){
//				Log.i("DoubleScreenCamera", "return to SingleCapturActivity");
//				Intent camera = new Intent(this, SingleCapturActivity.class);
//				startActivity(camera);
//			}
//			finish();
		}
		return super.onKeyDown(keyCode, event);
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		Log.i(TAG, "ScanPicActivity onCreate");
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
//		mModeManager = (ModeManager)getSystemService(Context.MODE_MANAGER_SERVICE);
//		mCurrentMode = mModeManager.getCurrentMode();
//		if(mCurrentMode == ModeManager.MODE_PHONE){
//			setContentView(R.layout.activity_photo_browse_phone);
//		}else {
//			setContentView(R.layout.activity_photo_browse_pad);
//		}
		
		ArrayList<String> listImgPath = getImgPathList();
		// save picture url collection into string array
		imageUrls = (String[]) listImgPath.toArray(new String[listImgPath.size()]);
		// add prefix
		for (int i = 0; i < imageUrls.length; i++) {
			imageUrls[i] = "file://" + imageUrls[i];
			Log.d(TAG, imageUrls[i]);
		}

		// DisplayImageOptions用于指导每一个Imageloader根据图片的状态（空白、下载错误、正在下载）显示对应的图片，
		// 是否将缓存加载到磁盘上，下载完后对图片进行怎么样的处理。
		options = new DisplayImageOptions.Builder()
				.showStubImage(R.drawable.ic_stub)
				.showImageForEmptyUri(R.drawable.ic_empty)
				.showImageOnFail(R.drawable.ic_error)
				.cacheInMemory(true)
				.cacheOnDisc(true).displayer(new RoundedBitmapDisplayer(20))
				.build();

		initViews();
		MyApplication.getInstance().addActivity(ScanPicActivity.this);
	}

	private void initViews(){
		final Gallery galleryView = (Gallery) findViewById(R.id.gallery);
		ImageAdapter adp = new ImageAdapter();
		galleryView.setAdapter(adp);
		mImageswitcher = (ImageSwitcher) findViewById(R.id.imageswitcher);
		
		galleryView.setSelection(switcherIndex, true);

		mImageswitcher.setFactory(new ViewFactory() {

			@Override
			public View makeView() {
				Log.d(TAG, "+++++++makeView++++++++++");
				ImageView imageView = new ImageView(ScanPicActivity.this);
				if(list.size() == 0){
					Toast.makeText(getApplicationContext(), "NO PICTURES", 0).	show();
				}
				imageView.setBackgroundColor(0xFF000000);
				imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
				imageView.setLayoutParams(new ImageSwitcher.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
				
				// setup init pictures
				try {
					if (list.size() != 0) {
						String bitmapUrl = list.get(switcherIndex);
						BitmapFactory.Options opts=new BitmapFactory.Options();
						opts.inJustDecodeBounds = true;
						opts.inTempStorage = new byte[100 * 1024];
						opts.inPreferredConfig = Bitmap.Config.RGB_565;
						opts.inPurgeable = true;
						opts.inSampleSize = 4;
						opts.inInputShareable = true; 
						opts.inJustDecodeBounds = false;
						Bitmap bm = BitmapFactory.decodeFile(bitmapUrl,opts);
						imageView.setImageBitmap(bm);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				if (imageswicher.size() != 0) {
					Log.i(TAG, "imageswicher.size"+imageswicher.size());
				}
				return imageView;
			}
		});

		// mImageswitcher.setOnTouchListener(this);

		mImageswitcher.setOnTouchListener(new OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {

				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN: {
					downX = event.getX();
					break;
				}
				case MotionEvent.ACTION_UP: {
					lastX = event.getX();
					if (lastX > downX) {
						if (currentPosition > 0) {
							mImageswitcher.setInAnimation(AnimationUtils.loadAnimation(getApplication(), R.anim.left_in));
							mImageswitcher.setOutAnimation(AnimationUtils.loadAnimation(getApplication(), R.anim.right_out));
							currentPosition--;
							// mImageswitcher.setImageResource(imgIds[currentPosition % imgIds.length]);
							Log.d(TAG, "currentPosition in switch list : "+currentPosition);
							Bitmap bitmap = bigImage.get(imageUrls[currentPosition]);//imageswicher.get(currentPosition);
							BitmapDrawable dra = new BitmapDrawable(getResources(), bitmap);
							mImageswitcher.setImageDrawable(dra);
							
							// setup current picture in gallery
							// =========================
							if (galleryView.getSelectedItemPosition() == 0) {
								switcherIndex = galleryView.getCount() - 1;
							} else {
								switcherIndex = galleryView.getSelectedItemPosition() - 1;
							}
							// ==========================
						} 
					}

					else if (lastX < downX) {
						if (currentPosition < imageUrls.length - 1) {
							mImageswitcher.setInAnimation(AnimationUtils.loadAnimation(getApplication(), R.anim.right_in));
							mImageswitcher.setOutAnimation(AnimationUtils.loadAnimation(getApplication(), R.anim.lift_out));
							currentPosition++;
							Log.d(TAG, "currentPosition in switch list : "+currentPosition);
							Bitmap bitmap = bigImage.get(imageUrls[currentPosition]);//imageswicher.get(currentPosition);
							BitmapDrawable dra = new BitmapDrawable(getResources(), bitmap);
							mImageswitcher.setImageDrawable(dra);
							
							// setup current picture in gallery
							// =========================
							if (galleryView.getSelectedItemPosition() == (galleryView.getCount() - 1)) {
								switcherIndex = 0;
							} else {
								switcherIndex = galleryView.getSelectedItemPosition() + 1;
							}
							// =================================
						} 
					}else {
						Log.d(TAG, "currentPosition : "+currentPosition+" will hold on");
					}

					// if(lastX-downX>100) {
					// 
					// if(galleryView.getSelectedItemPosition()==0){
					// switcherIndex = galleryView.getCount()-1;
					// } else{
					// switcherIndex=galleryView.getSelectedItemPosition()-1;
					// }
					// }
					// else if(downX-lastX>100){
					// 
					// if(galleryView.getSelectedItemPosition()==(galleryView.getCount()-1)){
					// switcherIndex=0;
					// } else{
					// switcherIndex=galleryView.getSelectedItemPosition()+1;
					// }
					// }
					// auto trigger ImageSwitcher:setOnItemSelectedListener
					Log.d(TAG, "gallery switcherIndex is : "+switcherIndex);
					galleryView.setSelection(switcherIndex, true);
				}
					break;
				}
				return true;
			}
		});

		galleryView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position, long id) {
			
				// 初始化“缩放动画”类的实例，表示从1倍放大到1.5倍，并且放大的中心点是图片的中心点
				ScaleAnimation animation = new ScaleAnimation(1, 1.5f, 1, 1.5f,
						Animation.RELATIVE_TO_SELF, 0.5f,
						Animation.RELATIVE_TO_SELF, 0.5f);
				animation.setDuration(1000);
				arg1.startAnimation(animation);
				// //////////////////////////////////////////////////////////////////////
				if (imageswicher != null) {
					Bitmap bitmap = bigImage.get(imageUrls[position]);//imageswicher.get(position);
					BitmapDrawable dra = new BitmapDrawable(getResources(), bitmap);
					mImageswitcher.setImageDrawable(dra);
				}

				Log.d(TAG, "touch thumbnail: "+position);
				currentPosition = position;
			}
			// /////////////////////////////////////////////////////////////////////
		});

	}

	@Override
	protected void onResume() {
		Log.d(TAG, "ScanPicActivity onResume");
		IntentFilter filter = new IntentFilter();
		filter.addAction(ACTION_MODE_SWITCH);
		registerReceiver(mReceiver, filter);
		super.onResume();
	}

	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public void onItemSelected(AdapterView<?> parent, View view, int position,
			long id) {
		// imageSwitcher.setImageResource(resIds[position % resIds.length]);
		Bitmap bitmap = bigImage.get(imageUrls[position]);//imageswicher.get(position);
		BitmapDrawable dra = new BitmapDrawable(getResources(), bitmap);
		mImageswitcher.setImageDrawable(dra);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onPause() {
		Log.i(TAG, "ScanPicActivity onPause");
		if(mReceiver != null) {
			unregisterReceiver(mReceiver);
		}
		super.onPause();
	}

	@Override
	protected void onStop(){
		Log.i(TAG, "ScanPicActivity onStop");
		super.onStop();
	}

	@Override
	protected void onDestroy(){
		Log.i(TAG, "ScanPicActivity onDestroy");
		super.onDestroy();
	}

	class ImageAdapter extends BaseAdapter {

		private ImageLoadingListener animateFirstListener = new AnimateFirstDisplayListener();

		// android.content.res.TypedArray typedArray =
		// obtainStyledAttributes(R.styleable.Gallery);
		// TypedArray typedArray = obtainStyledAttributes(R.styleable.Gallery);
		// set style of the border
		// mGalleryItemBackground =
		// typedArray.getResourceId(R.styleable.Gallery_android_galleryItemBackground,
		// 0);

		// TypedArray typedArray = obtainStyledAttributes(R.styleable.Gallery);
		// mGalleryItemBackground = typedArray.getResourceId(
		// R.styleable.Gallery_android_galleryItemBackground, 0);

		private class ViewHolder {
			public ImageView image;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return imageUrls.length;
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			View view = convertView;
			final ViewHolder holder;
			if (convertView == null) {
				view = getLayoutInflater().inflate(R.layout.item_gallery_image, parent, false);
				holder = new ViewHolder();
				holder.image = (ImageView) view.findViewById(R.id.image);
				view.setTag(holder);
			} else {
				holder = (ViewHolder) view.getTag();
			}

			imageLoader.displayImage(imageUrls[position], holder.image, options, animateFirstListener);
			return view;
		}
	}

	private class AnimateFirstDisplayListener extends SimpleImageLoadingListener {

		final List<String> displayedImages = Collections.synchronizedList(new LinkedList<String>());

		@Override
		public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
			if (loadedImage != null) {
				ImageView imageView = (ImageView) view;
				boolean firstDisplay = !displayedImages.contains(imageUri);
				if (firstDisplay) {
					FadeInBitmapDisplayer.animate(imageView, 500);
					displayedImages.add(imageUri);
					Log.d(TAG, "load image: "+imageUri);
					// ///////////////////////////////////
					//imageswicher.add(loadedImage);
					bigImage.put(imageUri, loadedImage);
				}
			}
		}
	}

	@Override
	public void onNothingSelected(AdapterView<?> parent) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean onTouch(View v, MotionEvent event) {
		// TODO Auto-generated method stub
		return false;
	}

	private class  MwReceiver extends BroadcastReceiver {
		
		public static final String ACTION_MODE_SWITCH = "action.lenovo.MODE_SWITCH";
		private static final String TAG = "DoubleScreenCamera";
		
		@Override
		public void onReceive(Context context, Intent intent) {
		
			try {
				String action = intent.getAction();
				if(action.equals(ACTION_MODE_SWITCH)) {
		    	               Log.i(TAG, "ScanPicActivity ACTION_MODE_SWITCH"); 	           
		    	               int  mode = intent.getIntExtra(ModeManager.EXTRA_MODE_CODE, -1);
		    	               Log.i(TAG,"receive event: "+mode+" current mode: "+mModeManager.getCurrentMode());

					if(mModeManager.getCurrentMode() != mode) {
						if ((ModeManager.MODE_PAD == mode)) {
							Log.i(TAG,"switch to Standard Browser");
							setContentView(R.layout.activity_photo_browse_pad);
						}else {
							Log.i(TAG,"switch to Slim Browser");
							setContentView(R.layout.activity_photo_browse_phone);
						}
						initViews();
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}
